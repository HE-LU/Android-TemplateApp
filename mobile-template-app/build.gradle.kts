val VERSION_MAJOR = 0 // max two digits
val VERSION_MINOR = 0 // max two digits
val VERSION_PATCH = 1 // max two digits

// Tt Initialize buildSrc objects if needed
Signing.initialize(project)

plugins {
    id("io.gitlab.arturbosch.detekt").version(Detekt.VERSION)
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-android-extensions")
    id("kotlin-kapt")
}

android {
    compileSdkVersion(Config.SDK_COMPILE_VERSION)
    buildToolsVersion = Config.BUILD_TOOLS_VERSION

    // Tt Default config settings
    defaultConfig {
        applicationId = Config.APPLICATION_ID
        targetSdkVersion(Config.SDK_TARGET_VERSION)
        minSdkVersion(Config.SDK_MIN_VERSION)
        // versionCode is generated by CI build process
        versionCode = 1
        versionName = "$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH"
    }

    // Tt Signing config settings
    signingConfigs {
        create("release") {
            val signingValues = Signing.signingValues()
            storeFile = File(signingValues.storeFilePath)
            storePassword = signingValues.storePassword
            keyAlias = signingValues.keyAlias
            keyPassword = signingValues.keyPassword
        }
    }

    flavorDimensions("base")

    productFlavors {
        create("develop") {
            buildConfigField("boolean", "DEV_ENVIRONMENT", "true")
            applicationIdSuffix = ".develop"
        }
        create("production") {
            buildConfigField("boolean", "DEV_ENVIRONMENT", "false")
        }
    }

    buildTypes {
        val debug by getting {
            buildConfigField("boolean", "LOGS", "true")
            applicationIdSuffix = ".debug"
            isDebuggable = true
            isMinifyEnabled = false
            isShrinkResources = false
            ext.set("enableCrashlytics", false)
            ext.set("alwaysUpdateBuildId", false)
        }

        val release by getting {
            buildConfigField("boolean", "LOGS", "false")
            signingConfig = signingConfigs.getByName("release")
            isDebuggable = false
            isZipAlignEnabled = true
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
        }
    }

    // Tt Compile options
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    // Tt Kotlin options
    kotlinOptions {
        jvmTarget = Jvm.VERSION
    }

    // Tt Increase the build performance but also increases the APK size
    aaptOptions {
        cruncherEnabled = false
    }

    // Tt To increase build performance
    dexOptions {
        preDexLibraries = true
        maxProcessCount = 8
    }

    // Tt Databinding must be enabled manually
    buildFeatures {
        dataBinding = true
    }
}

dependencies {
    // TT AndroidX
    implementation(AndroidX.CORE)
    implementation(AndroidX.APPCOMPAT)
    implementation(AndroidX.FRAGMENT)
    implementation(AndroidX.CARDVIEW)
    implementation(AndroidX.COLLECTION)
    implementation(AndroidX.CONSTRAINT_LAYOUT)
    implementation(AndroidX.MATERIAL)

    // Tt Lifecycle
    implementation(AndroidX.LIFECYCLE_RUNTIME)
    implementation(AndroidX.LIFECYCLE_EXTENSIONS)
    implementation(AndroidX.LIFECYCLE_VIEWMODEL)
    implementation(AndroidX.LIFECYCLE_LIVEDATA)
    kapt(AndroidX.LIFECYCLE_COMPILER)

    // TT Kotlin coroutines
    implementation(Kotlin.CORUTINES_CORE)
    implementation(Kotlin.CORUTINES_ANDROID)

    // TT Navigation
    implementation(AndroidX.NAVIGATION_FRAMGMET)
    implementation(AndroidX.NAVIGATION_UI)

    // TT Retrofit
    implementation(Retrofit.OKHTTP)
    implementation(Retrofit.OKHTTP_LOGGING_INTERCEPTOR)
    implementation(Retrofit.RETROFIT)

    // TT Glide
    implementation(Glide.GLIDE)
    implementation(Glide.GLIDE_OKHTTP3)
    kapt(Glide.GLIDE_COMPILER)

    // TT Others
    implementation(Timber.TIMBER)
    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar", "*.aar"))))
}

// Tt We need this to be able to get more than last 100 errors
kapt {
    javacOptions {
        option("-Xmaxerrs", 10000)
    }
}

// TT Detekt init
detekt {
    config = files("${project.rootDir}/extras/detekt.yml")
    parallel = true
}

// TT Ktlint init
ktlint {
    version.set(Ktlint.VERSION)
    android.set(true)
    disabledRules.addAll("max-line-length", "curly-spacing")
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}
